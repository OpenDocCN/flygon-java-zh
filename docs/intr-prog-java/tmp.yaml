- en: 'As you can see, if the `Optional` object is empty, then:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，如果`Optional`对象为空，则：
- en: The `or()` method of the `Optional` class allows for returning an alternative
    `Optional` object (with a value).
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Optional`类的`or()`方法允许返回另一个带有值的`Optional`对象。'
- en: The `orElse()` method allows for returning an alternative value.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orElse()`方法允许返回一种替代值。'
- en: The `orElseGet()` method allows for providing the `Supplier` function, which
    returns an alternative value.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orElseGet()`方法允许提供`Supplier`函数，该函数返回一种替代值。'
- en: 'The `ifPresentOrElse()` method allows for providing two functions: one that
    consumes the value from the `Optional` object, and another that does something
    if the `Optional` object is empty.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ifPresentOrElse()`方法允许提供两个函数：一个从`Optional`对象中消费值，另一个在`Optional`对象为空时执行某些操作。'
- en: Min and max
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小值和最大值
- en: 'The following Terminal operations return the minimum or maximum value of the
    stream elements, if present:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下终端操作如果存在则返回流元素的最小或最大值：
- en: '`Optional<T> min`(Comparator<T> comparator): Returns the minimum element of
    this stream, using the provided Comparator object.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Optional<T> min`(Comparator<T> comparator)：使用提供的Comparator对象返回此流的最小元素。'
- en: '`Optional<T> max`(Comparator<T> comparator): Returns the maximum element of
    this stream, using the provided Comparator object.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Optional<T> max`(Comparator<T> comparator)：使用提供的Comparator对象返回此流的最大元素。'
- en: 'Here is the demonstration code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是演示代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, in the case of non-numerical values, the minimum element is
    the one that is first (when ordered from the left to the right), according to
    the provided comparator; the maximum, accordingly, is the last element. In the
    case of numeric values, the minimum and maximum are just that—the biggest and
    the smallest number among the stream elements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在非数值值的情况下，最小元素是从左到右排序时的第一个元素，根据提供的比较器；相应地，最大值是最后一个元素。在数值值的情况下，最小值和最大值就是流元素中的最大数和最小数：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s look at another example, assuming that there is a `Person` class:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，假设有一个`Person`类：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The task is to find the oldest person in the following list:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是在以下列表中找到最年长的人：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to do that, we can create the following `Compartor<Person>`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们可以创建以下的`Compartor<Person>`：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, using this comparator, we can find the oldest person:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用这个比较器，我们可以找到最年长的人：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The toArray() operation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: toArray()操作
- en: 'These two Terminal operations generate an array that contains the stream elements:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个终端操作生成一个包含流元素的数组：
- en: '`Object[] toArray()` : Creates an array of objects; each object is an element
    of this stream.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object[] toArray()`：创建一个包含该流每个元素的对象数组。'
- en: '`A[] toArray(IntFunction<A[]> generator)`: Creates an array of the stream elements
    using the provided function.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`A[] toArray(IntFunction<A[]> generator)`: 使用提供的函数创建流元素的数组。'
- en: 'Let''s look at an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first example is straightforward. It converts elements to an array of the
    same type. As for the second example, the representation of `IntFunction` as `String[]::new`
    is probably not obvious, so let's walk through it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子很直接。它将元素转换为相同类型的数组。至于第二个例子，`IntFunction`作为`String[]::new`的表示可能不够明显，所以让我们逐步来看一下。
- en: '`String[]::new` is a method reference that represents the following lambda
    expression:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`String[]::new`是一个方法引用，代表以下lambda表达式：'
