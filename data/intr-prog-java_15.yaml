- en: Managing Objects, Strings, Time, and Random Numbers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理对象、字符串、时间和随机数
- en: The classes that we will be discussing in this chapter, belong—together with
    Java collections and arrays discussed in the previous chapters—to the group of
    classes (mostly utilities from the Java Standard Library and Apache Commons) that
    every programmer has to master in order to become an effective coder. They also
    illustrate various software designs and solutions that are instructive and can
    be used as patterns for best coding practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将讨论的类，与前几章讨论的Java集合和数组一起属于每个程序员都必须掌握的一类（主要是来自Java标准库和Apache Commons的工具类），以成为一名高效的编码人员。它们也展示了各种软件设计和解决方案，具有指导意义，并可作为最佳编码实践的模式。
- en: 'We will cover the following areas of functionality:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下功能领域：
- en: Managing objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理对象
- en: Managing strings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理字符串
- en: Managing time
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理时间
- en: Manage random numbers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理随机数
- en: 'The list of the overviewed classes includes:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 概述的类列表包括：
- en: '`java.util.Objects`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Objects`'
- en: '`org.apache.commons.lang3.ObjectUtils`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.ObjectUtils`'
- en: '`java.lang.String`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.String`'
- en: '`org.apache.commons.lang3.StringUtils`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3.StringUtils`'
- en: '`java.time.LocalDate`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalDate`'
- en: '`java.time.LocalTime`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalTime`'
- en: '`java.time.LocalDateTime`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.LocalDateTime`'
- en: '`java.lang.Math`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.Math`'
- en: '`java.util.Random`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Random`'
- en: Managing objects
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理对象
- en: You may not need to manage arrays and may even not need to manage collections
    (for some time, at least), but you cannot avoid managing objects, which means
    that the classes described in this section you are probably going to use every
    day.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不需要管理数组，甚至可能一段时间内不需要管理集合，但你无法避免管理对象，这意味着本节描述的类你可能每天都会使用。
- en: Although the `java.util.Objects` class was added to the Java Standard Libraries
    in 2011 (with the Java 7 release), while the `ObjectUtils` class has existed in
    the Apache Commons libraries since 2002, their use grew slowly. This may be partially
    explained by the small number of methods they had originally—only six in `ObjectUtils` in
    2003 and only nine in `Objects` in 2011\. However, they were very helpful methods
    that could make the code more readable and robust—less prone to errors. So, why
    these classes were not used more often from the very beginning remains a mystery.
    We hope that you start using them immediately with your very first project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`java.util.Objects`类是在2011年（Java 7发布时）添加到Java标准库中的，而`ObjectUtils`类自2002年以来就存在于Apache
    Commons库中，但它们的使用增长缓慢。这可能部分地可以解释它们最初的方法数量很少-2003年`ObjectUtils`只有6个方法，2011年`Objects`只有9个方法。然而，它们是非常有用的方法，可以使代码更易读、更健壮，减少错误的可能性。因此，为什么这些类从一开始就没有被更频繁地使用至今仍然是个谜。我们希望你能立即在你的第一个项目中开始使用它们。
- en: Class java.util.Objects
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类java.util.Objects
- en: 'The class `Objects` has only 17 methods—all static. We have already used some
    of them in the previous chapter when we implemented the class `Person`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Objects`只有17个方法-全部是静态的。在前一章中，当我们实现了类`Person`时，我们已经使用了其中的一些方法：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We used the class `Objects` in the methods `equals()` and `hashCode()` previously.
    Everything worked fine. But, notice how we check the parameter `name` in the preceding
    constructor. If the parameter is `null`, we assign to the field `name` an empty `String` value.
    We did it to avoid `NullPointerException` in line 25\. Another way to do it is
    to use the class `ObjectUtils` from the Apache Commons library. We will demonstrate
    it in the next section. Methods of the class `ObjectUtils` handle `null` values
    and make the conversion of a `null` parameter to an empty `String` unnecessary.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以前在`equals()`和`hashCode()`方法中使用了`Objects`类。一切都运行良好。但是，请注意我们如何检查前一个构造函数中的参数`name`。如果参数是`null`，我们将空的`String`值赋给字段`name`。我们这样做是为了避免第25行的`NullPointerException`。另一种方法是使用Apache
    Commons库中的`ObjectUtils`类。我们将在下一节中进行演示。`ObjectUtils`类的方法处理`null`值，并使将`null`参数转换为空的`String`变得不必要。
- en: But first, let's review the methods of the class `Objects`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们回顾一下`Objects`类的方法。
- en: equals() and deepEquals()
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: equals()和deepEquals()
- en: We talked about the `equals()` method implementation extensively, but always
    assumed that it was invoked on a non-`null` object, `obj`, so the call `obj.equals(anotherObject)` could
    not generate `NullPointerException`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们详细讨论了`equals()`方法的实现，但一直假设它是在一个非`null`的对象`obj`上调用的，`obj.equals(anotherObject)`的调用不会产生`NullPointerException`。
- en: 'Yet, sometimes we need to compare two objects, `a` and `b`, when one or both
    of them can be `null`. Here is typical code for such a case:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时我们需要比较两个对象`a`和`b`，当它们中的一个或两个可以是`null`时。以下是这种情况的典型代码：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is the actual source code of the `boolean Objects.equals(Object a, Object
    b)` method. It allows comparing two objects using the method `equals(Object)` and
    handles cases where one or both of them are `null`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`boolean Objects.equals(Object a, Object b)`方法的实际源代码。它允许使用方法`equals(Object)`比较两个对象，并处理其中一个或两个为`null`的情况。
- en: 'Another related method of the class `Objects` is `boolean deepEquals(Object a, Object
    b)`. Here is its source code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Objects`类的另一个相关方法是`boolean deepEquals(Object a, Object b)`。以下是其源代码：'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, it is based on `Arrays.deepEquals()`, which we discussed in
    the previous section. The demonstration code for these methods helps to understand
    the difference:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，它是基于我们在前一节中讨论的`Arrays.deepEquals()`。这些方法的演示代码有助于理解它们之间的区别：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, `Objects.equals(as1, as2)` and `Objects.equals(aas1,
    aas2)` return `false` because arrays cannot override the method `equals()` of
    the class `Object` and are compared by references, not by value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`Objects.equals(as1, as2)`和`Objects.equals(aas1, aas2)`返回`false`，因为数组无法覆盖`Object`类的`equals()`方法，而是通过引用而不是值进行比较。
- en: 'The method `Arrays.equals(aas1, aas2)` returns `false` for the same reason:
    because the elements of the nested array are arrays and are compared by references.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`Arrays.equals(aas1, aas2)`返回`false`的原因相同：因为嵌套数组的元素是数组，通过引用进行比较。
- en: 'To summarize, if you would like to compare two objects, `a` and `b`, by the
    values of their fields, then:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，如果您想比较两个对象`a`和`b`的字段值，则：
- en: If they are not arrays and `a` is not `null`, use `a.equals(b)`
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它们不是数组且`a`不是`null`，请使用`a.equals(b)`
- en: If they are not arrays and both objects can be `null`, use `Objects.equals(a,
    b)`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果它们不是数组且两个对象都可以是`null`，请使用`Objects.equals(a, b)`
- en: If both can be arrays and both can be `null`, use `Objects.deepEquals(a, b)`
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两者都可以是数组且都可以是`null`，请使用`Objects.deepEquals(a, b)`
- en: That said, we can see that the method `Objects.deepEquals()` is the safest one,
    but it does not mean you must always use it. Most of the time, you will know whether
    the compared objects can be `null` or can be arrays, so you can safely use other `equals()` methods
    too.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们可以看到方法`Objects.deepEquals()`是最安全的方法，但这并不意味着您必须总是使用它。大多数情况下，您将知道要比较的对象是否可以为`null`或可以是数组，因此您也可以安全地使用其他`equals()`方法。
- en: hash() and hashCode()
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hash()和hashCode()
- en: 'The hash values returned by the methods `hash()` or `hashCode()` are typically
    used as a key for storing the object in a hash-using collection, such as `HashSet()`.
    The default implementation in the  `Object` superclass is based on the object
    reference in memory.  It returns different hash values for two objects of the
    same class with the same values of the instance fields. That is why, if you need
    two class instances to have the same hash value for the same state, it is important
    to override the default `hashCode()` implementation using one of these methods:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`hash()`或`hashCode()`返回的哈希值通常用作将对象存储在使用哈希的集合中的键，例如`HashSet()`。在`Object`超类中的默认实现基于内存中的对象引用。对于具有相同类的两个对象且具有相同实例字段值的情况，它返回不同的哈希值。因此，如果需要两个类实例具有相同状态的相同哈希值，则重写默认的`hashCode()`实现使用以下方法至关重要：
- en: '`int hashCode(Object value)`: calculates a hash value for a single object'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hashCode(Object value)`: 计算单个对象的哈希值'
- en: '`int hash(Object... values)`: calculates a hash value for an array of objects
    (see how we used it in the class `Person` in our previous example)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int hash(Object... values)`: 计算对象数组的哈希值（请看我们在前面示例中的`Person`类中如何使用它）'
- en: 'Please notice that these two methods return different hash values for the same
    object when it is used as a single-element input array of the method `Objects.hash()`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当将同一对象用作方法`Objects.hash()`的单个输入数组时，这两种方法返回不同的哈希值：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The only value that yields the same hash from both methods is `null`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 仅一个值会从两种方法中返回相同的哈希值：`null`
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When used as a single not-null parameter, the same value has different hash
    values returned from the methods `Objects.hashCode(Object value)` and `Objects.hash(Object...
    values)`. The value `null` yields the same hash value, `0`, returned from each
    of these methods.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为单个非空参数使用时，相同的值从方法`Objects.hashCode(Object value)`和`Objects.hash(Object...
    values)`返回的哈希值不同。值`null`从这些方法中返回相同的哈希值`0`。
- en: Another advantage of using the class `Objects` for hash value calculation is
    that it tolerates `null` values, while the attempt to call the instance method `hashCode()` on
    the `null` reference generates `NullPointerException`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类`Objects`进行哈希值计算的另一个优点是它能容忍`null`值，而在尝试对`null`引用调用实例方法`hashCode()`时会生成`NullPointerException`。
- en: isNull() and nonNull()
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: isNull() 和 nonNull()
- en: 'These two methods are just thin wrappers around Boolean expressions, `obj == null` and  `obj
    != null`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法只是对布尔表达式`obj == null`和`obj != null`的简单包装：
- en: '`boolean isNull(Object obj)`: returns the same value as `obj == null`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNull(Object obj)`: 返回与`obj == null`相同的值。'
- en: '`boolean nonNull(Object obj)`: returns the same value as `obj != null`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean nonNull(Object obj)`: 返回与`obj != null`相同的值。'
- en: 'And here is the demo code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是演示代码：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: requireNonNull()
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: requireNonNull()
- en: 'The following methods of the class `Objects` check the value of the first parameter
    and, if the value is `null`, either throw `NullPointerException` or return the
    provided default value:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Objects`的以下方法检查第一个参数的值，如果值为`null`，则抛出`NullPointerException`或返回提供的默认值：
- en: '`T requireNonNull(T obj)`: Throws `NullPointerException` without a message
    if the parameter is `null`:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj)`: 如果参数为`null`，则抛出没有消息的`NullPointerException`：'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`T requireNonNull(T obj, String message)`: Throws `NullPointerException` with
    the message provided if the first parameter is `null`:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj, String message)`: 如果第一个参数为`null`，则抛出带有提供消息的`NullPointerException`：'
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`T requireNonNull(T obj, Supplier<String> messageSupplier)`: returns the message
    generated by the provided function if the first parameter is `null` or, if the
    generated message or the function itself is `null`, throws `NullPointerException`:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNull(T obj, Supplier<String> messageSupplier)`: 如果第一个参数为`null`，则返回由提供的函数生成的消息，如果生成的消息或函数本身为`null`，则抛出`NullPointerException`：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`T requireNonNullElse(T obj, T defaultObj)`: returns the first parameter value
    if it is non-null, or the second parameter value if it is non-null, or throws `NullPointerException` with
    the message `defaultObj`:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNullElse(T obj, T defaultObj)`: 如果第一个参数非空，则返回第一个参数的值，如果第二个参数非空，则返回第二个参数的值，如果都为空，则抛出带有消息`defaultObj`的`NullPointerException`：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)`: returns the
    first parameter value if it is non-null, or the object produced by the provided
    function if it is non-null, or throws `NullPointerException` with the message
    `defaultObj`:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T requireNonNullElseGet(T obj, Supplier<? extends T> supplier)`: 如果第一个参数非空，则返回第一个参数的值，否则返回由提供的函数生成的对象，如果都为空，则抛出带有消息`defaultObj`的`NullPointerException`：'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: checkIndex()
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: checkIndex()
- en: 'The following group of methods checks whether the index and the length of a
    collection or an array are compatible:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组方法检查集合或数组的索引和长度是否兼容：
- en: '`int checkIndex(int index, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index` is bigger than `length - 1`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkIndex(int index, int length)`: 如果提供的`index`大于`length - 1`，则抛出`IndexOutOfBoundsException`。'
- en: '`int checkFromIndexSize(int fromIndex, int size, int length)`: throws `IndexOutOfBoundsException` if
    the provided `index + size` is bigger than `length - 1`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkFromIndexSize(int fromIndex, int size, int length)`: 如果提供的`index
    + size`大于`length - 1`，则抛出`IndexOutOfBoundsException`。'
- en: '`int checkFromToIndex(int fromIndex, int toIndex, int length)`: throws `IndexOutOfBoundsException` if
    the provided `fromIndex` is bigger than `toIndex`, or `toIndex` is bigger than `length
    - 1`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int checkFromToIndex(int fromIndex, int toIndex, int length)`: 如果提供的`fromIndex`大于`toIndex`，或`toIndex`大于`length
    - 1`，则抛出`IndexOutOfBoundsException`。'
- en: 'Here is the demo code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是演示代码：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: compare()
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: compare()
- en: 'The method `int compare(T a, T b, Comparator<T> c)` of the class `Objects` uses
    the provided comparator''s method `compare(T o1, T o2)` for comparing the two
    objects. We have described already the behavior of the `compare(T o1, T o2)` method while
    talking about sorting collections, so the following results should be expected:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 类`Objects`的方法`int compare(T a, T b, Comparator<T> c)`使用提供的比较器的方法`compare(T o1,
    T o2)`来比较两个对象。我们已经在谈论排序集合时描述了`compare(T o1, T o2)`方法的行为，因此应该期望以下结果：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we have mentioned already, the method `compare(T o1, T o2)` returns the difference
    of positions of objects `o1` and `o2` in a sorted list for `String` objects and
    just `-1`, `0`, or `1` for `Integer` objects. The API describes it as returning
    `0` when objects are equal and a negative number when the first object is smaller
    than the second; otherwise, it returns a positive number.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，方法`compare(T o1, T o2)`返回`String`对象中对象`o1`和`o2`在排序列表中的位置之间的差异，而对于`Integer`对象，则返回`-1`、`0`或`1`。API描述它返回`0`当对象相等时，返回负数当第一个对象小于第二个对象时；否则，它返回正数。
- en: 'To demonstrate how the method `compare(T a, T b, Comparator<T> c)` works, let''s
    assume that we want to sort objects of the class `Person` so that the name and
    age are arranged in a natural order of `String` and `Integer` classes, respectively:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示方法`compare(T a, T b, Comparator<T> c)`的工作原理，假设我们要按照`Person`类对象的名称和年龄以分别按照`String`和`Integer`类的自然排序方式进行排序：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And here is the result of this new implementation of the `compareTo(Object)` method
    of the class `Person`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`Person`类中`compareTo(Object)`方法的新实现的结果：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see, the `Person` objects are ordered by name in their natural order
    first, then by age in their natural order too. If we need to reverse the order
    of names, for example, we change the `compareTo(Object)` method to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`Person`对象首先按照它们的名称的自然顺序排序，然后按照它们的年龄的自然顺序排序。如果我们需要反转名称的顺序，例如，我们将`compareTo(Object)`方法更改为以下内容：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The results looks as like we expected:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的样子就像我们期望的一样：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The weakness of the method `compare(T a, T b, Comparator<T> c)` is that it does
    not handle `null` values. Adding the `new Person(25, null)` object to the list
    triggers `NullPointerException` during sorting. In such cases, it is better to
    use the `org.apache.commons.lang3.ObjectUtils.compare(T o1, T o2)` method, which
    we are going to demonstrate in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`compare(T a, T b, Comparator<T> c)`的弱点在于它不能处理`null`值。将`new Person(25, null)`对象添加到列表中，在排序时会触发`NullPointerException`异常。在这种情况下，最好使用`org.apache.commons.lang3.ObjectUtils.compare(T
    o1, T o2)`方法，我们将在下一节中演示。
- en: toString()
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: toString()
- en: 'There are cases when you need to convert an `object` (which is a reference
    to some class type) to its `String` representation. When the reference `obj` is
    assigned a `null` value (the object is not created yet), writing `obj.toString()` 
    generates `NullPointerException`. For such cases, using the following methods
    of the class `Objects` is a better choice:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要将一个`Object`对象（它是对某个类类型的引用）转换为它的`String`表示。当引用`obj`被赋予`null`值（对象还未创建）时，编写`obj.toString()`会生成`NullPointerException`异常。对于这种情况，使用`Objects`类的以下方法是更好的选择：
- en: '`String toString(Object o)`: returns the result of calling `toString()` on
    the first parameter when it is not `null` and `null` when the first parameter
    value is `null`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toString(Object o)`: 当第一个参数值不为`null`时，返回调用第一个参数的`toString()`的结果，否则返回`null`'
- en: '`String toString(Object o, String nullDefault)`: returns the result of calling `toString()` on
    the first parameter when it is not `null` and the second parameter value `nullDefault` when
    the first parameter value is `null`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toString(Object o, String nullDefault)`: 当第一个参数值不为`null`时，返回调用第一个参数的`toString()`的结果，否则返回第二个参数值`nullDefault`'
- en: 'Here is the code that demonstrates how to use these methods:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是演示如何使用这些方法的代码：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By the way, unrelated to the current discussion, please notice how we used the
    method `print()` instead of `println()` to show all the results in one line, because
    the method `print()` does not add an end-of-line symbol.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，与当前讨论无关的是，请注意我们如何使用`print()`方法而不是`println()`方法来显示所有结果在一行中，因为`print()`方法不会添加行结束符。
- en: Class lang3.ObjectUtils
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ObjectUtils`类'
- en: The class `org.apache.commons.lang3.ObjectUtils` of the Apache Commons library
    complements the methods of the class `java.util.Objects` described previously.
    The scope of this book and the allocated size does not allow for a detailed review
    of all the methods of the class `ObjectUtils`, so we will describe them briefly,
    grouped by related functionality, and will demonstrate only those that are aligned
    with the examples we have provided already.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons库的`org.apache.commons.lang3.ObjectUtils`类补充了先前描述的`java.util.Objects`类的方法。本书的范围和分配的大小不允许详细审查`ObjectUtils`类的所有方法，因此我们将根据相关功能进行简要描述，并仅演示那些与我们已经提供的示例相关的方法。
- en: 'All the methods of the class `ObjectUtils` can be organized into seven groups:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectUtils`类的所有方法可以分为七个组：'
- en: 'Object cloning methods:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象克隆方法：
- en: '`T clone(T obj)`: returns a copy of the provided object if it implements the
    interface `Cloneable`; otherwise, returns `null`.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T clone(T obj)`: 如果提供的对象实现了`Cloneable`接口，则返回提供的对象的副本；否则返回`null`。'
- en: '`T cloneIfPossible(T obj)`: returns a copy of the provided object if it implements
    the interface `Cloneable`; otherwise, returns the original provided object.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T cloneIfPossible(T obj)`: 如果提供的对象实现了`Cloneable`接口，则返回提供的对象的副本；否则返回原始提供的对象。'
- en: 'Methods that support object comparison:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持对象比较的方法：
- en: '`int compare(T c1, T c2)`: compares newly ordered positions of the two objects
    that implement the interface `Comparable`; allows any or both parameters to be `null`;
    places a `null` value in front of a non-null value.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int compare(T c1, T c2)`: 比较实现`Comparable`接口的两个对象的新排序位置；允许任意参数或两个参数都为`null`；将一个`null`值放在非空值的前面。'
- en: '`int compare(T c1, T c2, boolean nullGreater)`: behaves exactly as the previous
    method if the value of parameter `nullGreater` is `false`; otherwise, places a
    `null` value behind a non-null value. We can demonstrate the last two methods
    by using them in our class `Person`:'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int compare(T c1, T c2, boolean nullGreater)`: 如果参数`nullGreater`的值为`false`，则行为与前一个方法完全相同；否则，将一个`null`值放在非空值的后面。我们可以通过在我们的`Person`类中使用最后两个方法来演示这两个方法：'
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of this change allows us to use a `null` value for the `name` field:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种改变的结果使我们可以为`name`字段使用`null`值。
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Since we have used the method `Objects.compare(T c1, T c2)`, the `null` value
    was placed in front of non-null values. By the way, have you noticed that we do
    not display `null` anymore? That is because we have changed the method `toString()` of
    the class `Person` as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了`Objects.compare(T c1, T c2)`方法，`null`值被放在非空值的前面。顺便问一下，你是否注意到我们不再显示`null`了？那是因为我们已经按照以下方式更改了类`Person`的方法`toString()`：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Instead of just displaying the value of the field `name`, we used the method `Objects.toString(Object
    o, String nullDefault)`, which substitutes the object with the provided `nullDefault` value
    when the object is `null`. As to whether to use this method, in this case, is
    a matter of style. Many programmers would probably argue that we must display
    the actual value without substituting it for something else. But, we have done
    it just to show how the method `Objects.toString(Object o, String nullDefault)` could
    be used.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅显示字段`name`的值，我们还使用了方法`Objects.toString(Object o, String nullDefault)`，当对象为`null`时，用提供的`nullDefault`值替换对象。在这种情况下，是否使用此方法是一种风格问题。许多程序员可能会认为我们必须显示实际值，而不是将其替换为其他内容。但是，我们这样做只是为了展示方法`Objects.toString(Object
    o, String nullDefault)`的用法。
- en: 'If we now use the second `compare(T c1, T c2, boolean nullGreater)` method,
    the `compareTo()` method of the class `Person` will look as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用第二个`compare(T c1, T c2, boolean nullGreater)`方法，那么类`Person`的`compareTo()`方法将如下所示：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, `Person` objects with their `name` set to `null` will be shown at the
    end of the sorted list:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，具有其`name`设置为`null`的`Person`对象将显示在排序列表的末尾：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And, to complete the discussion of `null` values, the preceding code will break
    with `NullPointerException` when a `null` object is added to the list: `list.add(null)`.
    To avoid the exception, you can use a special `Comparator` object that handles
    the `null` elements of a list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成关于`null`值的讨论，当将`null`对象添加到列表中时，上述代码将抛出`NullPointerException`异常：`list.add(null)`。为了避免异常，可以使用一个特殊的`Comparator`对象来处理列表的`null`元素：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this code, you can see how we have indicated the desire to see the `null` objects
    at the end of the list. Instead, we could use another `Comparator` that places
    null objects at the beginning of the sorted list:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你可以看到我们已经表明希望在列表的末尾看到`null`对象。相反，我们可以使用另一个将空对象放在排序列表开头的`Comparator`：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`notEqual`:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notEqual`：'
- en: '`boolean notEqual(Object object1, Object object2)`: compares two objects for
    inequality, where either one or both objects may be `null`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean notEqual(Object object1, Object object2)`: 比较两个对象是否不相等，其中一个或两个对象都可以是`null`。'
- en: '`identityToString`:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identityToString`：'
- en: '`String identityToString(Object object)`: returns the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String identityToString(Object object)`: 返回提供的对象的`String`表示，就好像是由基类`Object`的默认方法`toString()`生成的一样。'
- en: '`void identityToString(StringBuffer buffer, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(StringBuffer buffer, Object object)`: 将所提供对象的`String`表示追加到提供的`StringBuffer`对象上，就好像由基类`Object`的默认方法`toString()`生成一样。'
- en: '`void identityToString(StringBuilder builder, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(StringBuilder builder, Object object)`: 将所提供对象的`String`表示追加到提供的`StringBuilder`对象上，就好像由基类`Object`的默认方法`toString()`生成一样。'
- en: '`void identityToString(Appendable appendable, Object object)`: appends the `String` representation
    of the provided object as if produced by the default method `toString()` of the
    base class `Object`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void identityToString(Appendable appendable, Object object)`: 将所提供对象的`String`表示追加到提供的`Appendable`对象上，就好像由基类`Object`的默认方法`toString()`生成一样。'
- en: 'The following code demonstrates two of these methods:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了其中的两种方法：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`allNotNull` and `anyNotNull`:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allNotNull`和`anyNotNull`：'
- en: '`boolean allNotNull(Object... values)`: returns `true` when all values in the
    provided array are not `null`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean allNotNull(Object... values)`: 当所提供数组中所有值都不为`null`时返回`true`。'
- en: '`boolean anyNotNull(Object... values)`: returns `true` when at least one value
    in the provided array is not `null`'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean anyNotNull(Object... values)`: 当所提供数组中至少有一个值不为`null`时返回`true`。'
- en: '`firstNonNull` and `defaultIfNull`:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firstNonNull`和`defaultIfNull`：'
- en: '`T firstNonNull(T... values)`: returns the first value from the provided array
    that is not `null`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T firstNonNull(T... values)`: 返回所提供数组中第一个不为`null`的值。'
- en: '`T defaultIfNull(T object, T defaultValue)`: returns the provided default value
    if the first parameter is `null`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T defaultIfNull(T object, T defaultValue)`: 如果第一个参数为`null`，则返回提供的默认值。'
- en: '`max`, `min`, `median`, and `mode`:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`、`min`、`median`和`mode`：'
- en: '`T max(T... values)`: returns the last in the ordered list of provided values
    that implement the `Comparable` interface; returns `null` only when all values
    are `null`'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T max(T... values)`: 返回所提供值列表中实现了`Comparable`接口的最后一个值；仅当所有值都为`null`时返回`null`。'
- en: '`T min(T... values)`: returns the first in the ordered list of provided values
    that implement the `Comparable` interface; returns `null` only when all values
    are `null`'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T min(T... values)`: 返回所提供值列表中实现了`Comparable`接口的第一个值；仅当所有值都为`null`时返回`null`。'
- en: '`T median(T... items)`: returns the value that is in the middle of the ordered
    list of provided values that implement the `Comparable` interface; if the count
    of the values is even, returns the smallest of the two in the middle'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T median(T... items)`: 返回所提供值列表中实现了`Comparable`接口的有序列表中位于中间的值；如果值的计数是偶数，则返回中间两个中较小的一个。'
- en: '`T median(Comparator<T> comparator, T... items)`: returns the value that is
    in the middle of the list of provided values ordered according to the provided `Comparator` object;
    if the count of the values is even, returns the smallest of the two in the middle'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T median(Comparator<T> comparator, T... items)`: 返回根据提供的`Comparator`对象对提供的值列表排序后位于中间的值；如果值的计数是偶数，则返回中间两个中较小的一个。'
- en: '`T mode(T... items)`: returns the most frequently occurring item from the items provided;
    returns `null` when such an item occurs most often or when there is no one item
    that occurs most often; here is the code that demonstrates this last method:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`T mode(T... items)`: 返回提供的项目中出现频率最高的项目；当没有出现最频繁的项目或没有一个项目最频繁地出现时返回`null`；下面是演示此最后一个方法的代码：'
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Managing strings
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理字符串
- en: The class `String` is used a lot. So, you have to have a good handle on its
    functionality. We talked already talked about `String` value immutability in [Chapter
    5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml), *Java Language Elements and Types*.
    We have shown that every time a `String` value is "modified", a new copy of the
    value is created, which means that in the case of multiple "modifications", many `String` objects
    are created, consuming memory and putting a burden on the JVM.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 类`String`经常被使用。因此，您必须对其功能有很好的掌握。我们已经在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml)中讨论了`String`值的不可变性，*Java语言元素和类型*。我们已经表明，每次“修改”`String`值时，都会创建一个新副本，这意味着在多次“修改”的情况下，会创建许多`String`对象，消耗内存并给JVM带来负担。
- en: In such cases, it is advisable to use the class `java.lang.StringBuilder` or `java.lang.StringBuffer` because
    they are modifiable objects and do not have an overhead of creating `String` value
    copies. We will show how to use them and explain the difference between these
    two classes in the first part of this section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，建议使用类`java.lang.StringBuilder`或`java.lang.StringBuffer`，因为它们是可修改的对象，不需要创建`String`值的副本。我们将展示如何使用它们，并在本节的第一部分解释这两个类之间的区别。
- en: After that, we will review the methods of the class `String` and then provide
    an overview of the class `org.apache.commons.lang3.StringUtils`, which complements
    the class `String` functionality.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们会回顾类`String`的方法，然后提供一个对`org.apache.commons.lang3.StringUtils`类的概述，该类补充了类`String`的功能。
- en: StringBuilder and StringBuffer
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`StringBuilder`和`StringBuffer`'
- en: The classes `StringBuilder` and `StringBuffer` have exactly the same list of
    methods. The difference is that the methods of the class `StringBuilder` perform
    faster than the same methods of the class `StringBuffer`. That is because the
    class `StringBuffer` has an overhead of not allowing concurrent access to its
    values from different application threads. So, if you are not coding for multithreaded
    processing, use `StringBuilder`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 类`StringBuilder`和`StringBuffer`具有完全相同的方法列表。不同之处在于类`StringBuilder`的方法执行速度比类`StringBuffer`的相同方法更快。这是因为类`StringBuffer`不允许不同应用程序线程同时访问其值，所以如果你不是为多线程处理编码，就使用`StringBuilder`。
- en: There are many methods in the classes `StringBuilder` and `StringBuffer`.  But,
    we are going to show how to use only the method `append()`, which is by far the
    most popular, used for cases when multiple `String` value modifications are required.
    Its main function is to append a value to the end of the value already stored
    inside the `StringBuilder` (or `StringBuffer`) object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 类`StringBuilder`和`StringBuffer`中有许多方法。但是，我们将展示如何只使用方法`append()`，这显然是最受欢迎的方法，用于需要多次修改`String`值的情况。它的主要功能是将一个值追加到已存储在`StringBuilder`（或`StringBuffer`）对象中的值的末尾。
- en: 'The method `append()` is overloaded for all primitive types and for the classes `String`, `Object`, `CharSequence`,
    and `StringBuffer`, which means that a `String` representation of the passed-in
    object of any of these classes can be appended to the existing value. For our
    demonstration, we are going use only the `append(String s)` version because that
    is what you are probably going to use most of the time. Here is an example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`append()`被重载为所有原始类型和类`String`、`Object`、`CharSequence`和`StringBuffer`，这意味着传入任何这些类的对象的`String`表示都可以追加到现有值中。为了演示，我们将只使用`append(String
    s)`版本，因为这可能是你大部分时间都会使用的。这里是一个例子：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There are also methods `replace()`, `substring()`, and `insert()` in the class `StringBuilder` (and `StringBuffer`)
    that allow modifying the value further. They are used much less often than the
    method `append()` though, and we are not going to discuss them as they are outside
    the scope of this book.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 类`StringBuilder`（和`StringBuffer`）中还有`replace()`、`substring()`和`insert()`方法，允许进一步修改值。虽然它们不像方法`append()`那样经常使用，但我们不打算讨论它们，因为它们超出了本书的范围。
- en: Class java.lang.String
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类java.lang.String
- en: The class `String` has 15 constructors and almost 80 methods. To talk details
    and demonstrate each of them is just too much for this book, so we will comment
    only on the most popular methods and just mention the rest. After you master the
    basics, you can read the online documentation and see what else you can do with
    other methods of the class `String`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 类`String`有15个构造函数和近80个方法。在这本书中详细讨论和演示每一个方法对来说有点过分，所以我们只会评论最受欢迎的方法，其他的只会提到。当你掌握了基础知识后，你可以阅读在线文档，看看类`String`的其他方法还可以做什么。
- en: Constructors
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构造函数
- en: The constructors of the class `String` are useful if you are concerned that
    the strings your application creates consume too much memory. The problem is that `String` literals
    (`abc`, for example) are stored in a special area of the memory called the "string
    constant pool" and never garbage collected. The idea behind such a design is that `String` literals
    consume substantially more memory than numbers. Also, the handling of such large
    entities has an overhead that may tax the JVM. That is why the designers figured
    it is cheaper to store them and share them between all application threads than
    allocate new memory and then clean it up several times for the same value.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您担心应用程序创建的字符串消耗过多的内存，则`String`类的构造函数很有用。问题在于，`String`字面值（例如`abc`）存储在内存的特殊区域中，称为“字符串常量池”，并且永远不会被垃圾回收。这样设计的理念是，`String`字面值消耗的内存远远超过数字。此外，处理这样的大型实体会产生开销，可能会使JVM负担过重。这就是设计者认为将它们存储并在所有应用程序线程之间共享比分配新内存然后多次清理相同值更便宜的原因。
- en: 'But if the rate of reuse of the `String` values is low, while the stored `String` values
    consume too much memory, creating a `String` object with a constructor may be
    the solution to the problem. Here is an example:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果`String`值的重用率较低，而存储的`String`值消耗过多内存，则使用构造函数创建`String`对象可能是解决问题的方法。这里是一个例子：
- en: '[PRE29]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: A `String` object created this way resides in the heap area (where all objects
    are stored) and is garbage collected when not used anymore. That is when the `String` constructor
    shines.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建的`String`对象位于堆区（存储所有对象的地方），并且在不再使用时进行垃圾回收。这就是`String`构造函数发挥作用的时候。
- en: If necessary, you can use the method `intern()` of the class `String` to create
    a copy of the heap `String` object in the string constant pool. It allows us not
    only to share the value with other application threads (in multithreaded processing),
    but also to compare it with another literal value by reference (using the operator
    `==`). If the references are equal, it means they point to the same `String` value
    in the pool.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如有必要，您可以使用`String`类的`intern()`方法，在字符串常量池中创建堆`String`对象的副本。它不仅允许我们与其他应用程序线程共享值（在多线程处理中），还允许我们通过引用（使用运算符`==`）将其与另一个字面值进行比较。如果引用相等，则意味着它们指向池中的相同`String`值。
- en: But, mainstream programmers rarely manage the memory this way, so we will not
    discuss this topic further.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，主流程序员很少以这种方式管理内存，因此我们将不再进一步讨论这个话题。
- en: format()
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`format()`'
- en: 'The method `String format(String format, Object... args)` allows insertion
    of the provided objects into specified locations of a string and formatting them
    as needed. There are many format specifiers in the class `java.util.Formatter`.
    We will demonstrate here only `%s`, which converts the passed-in object to its `String` representation
    by invoking it on the object method `toString()`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String format(String format, Object... args)`允许将提供的对象插入字符串的指定位置，并根据需要进行格式化。在`java.util.Formatter`类中有许多格式说明符。我们这里只演示`%s`，它通过调用对象的`toString()`方法将传入的对象转换为其`String`表示形式：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: replace()
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`replace()`'
- en: 'The method `String replace(CharSequence target, CharSequence replacement)` in
    the `String` value replaces the value of the first parameter with the value of
    the second one:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 类中的方法`String replace(CharSequence target, CharSequence replacement)`，该方法会用第二个参数的值替换第一个参数的值：'
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are also the methods `String replaceAll(String regex, String replacement)` and `String
    replaceFirst(String regex, String replacement)`, which have similar capabilities.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些方法，比如`String replaceAll(String regex, String replacement)`和`String replaceFirst(String
    regex, String replacement)`，它们具有类似的功能。
- en: compareTo()
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`compareTo()`'
- en: We have already used the `int compareTo(String anotherString)` method in our
    examples. It returns the difference between the positions of this `String` value
    and the value of `anotherString` in an ordered list. It is used for the natural
    ordering of strings since it is an implementation of the `Comparable` interface.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在示例中使用了`int compareTo(String anotherString)`方法。它返回此`String`值和`anotherString`值在有序列表中的位置差异。它用于字符串的自然排序，因为它是`Comparable`接口的实现。
- en: The method `int compareToIgnoreCase(String str)` performs the same function
    but ignores the case of the compared strings and is not used for natural ordering
    because it is not an implementation of the `Comparable` interface.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`int compareToIgnoreCase(String str)`执行相同的功能，但会忽略比较字符串的大小写，并且不用于自然排序，因为它不是`Comparable`接口的实现。
- en: valueOf(Objectj)
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`valueOf(Object j)`'
- en: The static method `String valueOf(Object obj)` returns `null` if the provided
    object is `null`, or calls the method `toString()` on the object provided.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法 `String valueOf(Object obj)` 如果提供的对象为 `null`，则返回 `null`，否则调用提供对象的 `toString()` 方法。
- en: valueOf(primitive or char[])
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: valueOf(基本类型或字符数组)
- en: 'Any primitive type value can be passed as the parameter into the static method `String
    valueOf(primitive value)`, which returns the String representation of the value provided.
    For example, `String.valueOf(42)` returns `42`. This group of methods includes
    the following static methods:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 任何基本类型的值都可以作为参数传递给静态方法 `String valueOf(primitive value)`，该方法返回所提供值的字符串表示形式。例如，`String.valueOf(42)` 返回`42`。该组方法包括以下静态方法：
- en: '`String valueOf(boolean b)`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(boolean b)`'
- en: '`String valueOf(char c)`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char c)`'
- en: '`String valueOf(double d)`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(double d)`'
- en: '`String valueOf(float f)`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(float f)`'
- en: '`String valueOf(int i)`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(int i)`'
- en: '`String valueOf(long l)`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(long l)`'
- en: '`String valueOf(char[] data)`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char[] data)`'
- en: '`String valueOf(char[] data, int offset, int count)`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String valueOf(char[] data, int offset, int count)`'
- en: copyValueOf(char[])
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: copyValueOf(char[])
- en: The method `String copyValueOf(char[] data)` is equivalent to `valueOf(char[])`,
    while the method `String copyValueOf(char[] data, int offset, int count)` is equivalent
    to `valueOf(char[], int, int)`. They return a `String` representation of a char
    array or its subarray.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `String copyValueOf(char[] data)` 等效于 `valueOf(char[])`，而方法 `String copyValueOf(char[]
    data, int offset, int count)` 等效于 `valueOf(char[], int, int)`。它们返回字符数组或其子数组的 `String` 表示形式。
- en: And the method `void getChars(int srcBegin, int srcEnd, char[] dest, int dstBegin)` copies
    characters from this `String` value into the destination character array.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 而方法 `void getChars(int srcBegin, int srcEnd, char[] dest, int dstBegin)` 将此 `String` 值中的字符复制到目标字符数组中。
- en: indexOf() and substring()
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: indexOf() 和 substring()
- en: 'Various `int indexOf(String str)` and `int lastIndexOf(String str)` methods
    return the position of a substring  in a string:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 各种 `int indexOf(String str)` 和 `int lastIndexOf(String str)` 方法返回字符串中子字符串的位置：
- en: '[PRE32]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Notice that the position count starts from zero.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意位置计数从零开始。
- en: 'The method `String substring(int beginIndex)` returns the rest of the string
    value, starting from the position (index) passed in as the parameter:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `String substring(int beginIndex)` 返回从作为参数传递的位置（索引）开始的字符串的剩余部分：
- en: '[PRE33]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The character with the `beginIndex` position is the first that is present in
    the preceding substring.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 位置为 `beginIndex` 的字符是前一个子字符串中存在的第一个字符。
- en: 'The method `String substring(int beginIndex, int endIndex)` returns the substring,
    starting from the position passed in as the first parameter, to the position passed
    in as the second parameter:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `String substring(int beginIndex, int endIndex)` 返回从作为第一个参数传递的位置开始到作为第二个参数传递的位置的子字符串：
- en: '[PRE34]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As with the method `substring(beginIndex)`, the character with the `beginIndex` position
    is the first that is present in the preceding substring, while the character with
    the `endIndex` position is not included. The difference `endIndex - beginIndex` equals
    the length of the substring.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 与方法 `substring(beginIndex)` 一样，位置为 `beginIndex` 的字符是前一个子字符串中存在的第一个字符，而位置为 `endIndex` 的字符不包括在内。 `endIndex
    - beginIndex` 的差等于子字符串的长度。
- en: 'This means that the following two substrings are equal:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以下两个子字符串相等：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: contains() and matches()
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: contains() 和 matches()
- en: 'The method `boolean contains(CharSequence s)` returns `true` when the provided
    sequence of characters (substring) is present:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `boolean contains(CharSequence s)` 在提供的字符序列（子字符串）存在时返回 `true`：
- en: '[PRE36]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Other similar methods are:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类似的方法有：
- en: '`boolean matches(String regex)`: uses a regular expression (not a subject of
    this book)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean matches(String regex)`: 使用正则表达式（本书不讨论此内容）'
- en: '`boolean regionMatches(int tOffset, String other, int oOffset, int length)`:
    compares regions of two strings'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean regionMatches(int tOffset, String other, int oOffset, int length)`:
    比较两个字符串的区域'
- en: '`boolean regionMatches(boolean ignoreCase, int tOffset, String other, int oOffset,
    int length)`: same as above, but with the flag `ignoreCase` indicating whether
    to ignore the case'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean regionMatches(boolean ignoreCase, int tOffset, String other, int oOffset,
    int length)`: 与上述相同，但使用标志 `ignoreCase` 指示是否忽略大小写'
- en: split(), concat(), and join()
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: split(), concat() 和 join()
- en: 'The methods `String[] split(String regex)` and `String[] split(String regex,
    int limit)` use the passed-in regular expression to split the strings into substrings.
    We do not explain regular expressions in this book. However, there is a very simple
    one that is easy to use even if you know nothing about regular expressions: if
    you just pass into this method any symbol or substring present in a string, the
    string will be broken (split) into parts separated by the passed-in value, for
    example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String[] split(String regex)`和`String[] split(String regex, int limit)`使用传入的正则表达式将字符串拆分成子字符串。我们在本书中不解释正则表达式。但是，有一个非常简单的正则表达式，即使您对正则表达式一无所知也很容易使用：如果您只是将字符串中存在的任何符号或子字符串传递到此方法中，该字符串将被拆分为以传入的值分隔的部分，例如：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This code just illustrates the functionality. But the following code snippet
    is more practical:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码仅说明了功能。但是以下代码片段更实用：
- en: '[PRE38]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As you can see, the second parameter in the `split()` method limits the number
    of resulting substrings.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，`split()`方法中的第二个参数限制了生成的子字符串的数量。
- en: 'The method `String concat(String str)` adds the passed-in value to the end
    of the string:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String concat(String str)`将传入的值添加到字符串的末尾：
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `concat()` method creates a new `String` value with the result of concatenation,
    so it is quite economical. But if you need to add (concatenate) many values, using `StringBuilder` (or `StringBuffer`,
    if you need protection from concurrent access) would be a better choice. We discussed
    it in the previous section. Another option would be to use the operator `+`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`concat()`方法创建一个新的`String`值，其中包含连接的结果，因此非常经济。但是，如果您需要添加（连接）许多值，则使用`StringBuilder`（或`StringBuffer`，如果需要保护免受并发访问）将是更好的选择。我们在前一节中讨论过这个问题。另一个选择是使用运算符`+`：'
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The operator `+`, when used with `String` values, is implemented based on `StringBuilder`,
    so allows the addition of `String` values by modifying the existing one. There
    is no performance difference between using StringBuilder and just the operator
    `+` for adding `String` values.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`String`值一起使用时，运算符`+`是基于`StringBuilder`实现的，因此允许通过修改现有的值来添加`String`值。使用StringBuilder和仅使用运算符`+`添加`String`值之间没有性能差异。
- en: 'The methods `String join(CharSequence delimiter, CharSequence... elements)` and `String
    join(CharSequence delimiter, Iterable<? extends CharSequence> elements)` are based
    on `StringBuilder` too. They assemble the provided values in one `String` value
    using the passed-in `delimiter` to separate the assembled values inside the created `String` result.
    Here is an example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`String join(CharSequence delimiter, CharSequence... elements)`和`String join(CharSequence
    delimiter, Iterable<? extends CharSequence> elements)`也基于`StringBuilder`。它们使用传入的`delimiter`将提供的值组装成一个`String`值，以在创建的`String`结果中分隔组装的值。以下是一个示例：
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: startsWith() and endsWith()
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: startsWith() 和 endsWith()
- en: 'The following methods return `true` when the String value starts (or ends)
    with the provided substring `prefix`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法在字符串值以提供的子字符串`prefix`开始（或结束）时返回`true`：
- en: '`boolean startsWith(String prefix)`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean startsWith(String prefix)`'
- en: '`boolean startsWith(String prefix, int toffset)`'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean startsWith(String prefix, int toffset)`'
- en: '`boolean endsWith(String suffix)`'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean endsWith(String suffix)`'
- en: 'Here is the demo code:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是演示代码：
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: equals() and equalsIgnoreCase()
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: equals() 和 equalsIgnoreCase()
- en: We have used the method `boolean equals(Object anObject)` of the class `String` several
    times already and have pointed out that it compares this `String` value with other
    objects. This method returns `true` only when the passed-in object is `String` with
    the same value.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次使用了`String`类的`boolean equals(Object anObject)`方法，并指出它将此`String`值与其他对象进行比较。此方法仅在传入的对象是具有相同值的`String`时返回`true`。
- en: The method `boolean equalsIgnoreCase(String anotherString)` does the same but
    also ignores case, so the strings `AbC` and `ABC` are considered equal.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean equalsIgnoreCase(String anotherString)`也执行相同的操作，但还忽略大小写，因此字符串`AbC`和`ABC`被视为相等。
- en: contentEquals() and copyValueOf()
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: contentEquals() 和 copyValueOf()
- en: The method `boolean contentEquals(CharSequence cs)` compares this `String` value
    with the `String` representation of an object that implements the interface `CharSequence`.
    The popular `CharSequence` implementations are `CharBuffer`, `Segment`, `String`, `StringBuffer`,
    and `StringBuilder`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`boolean contentEquals(CharSequence cs)`将此`String`值与实现接口`CharSequence`的对象的`String`表示进行比较。流行的`CharSequence`实现包括`CharBuffer`、`Segment`、`String`、`StringBuffer`和`StringBuilder`。
- en: The method `boolean contentEquals(StringBuffer sb)` does the same but for `StringBuffer` only.
    It has slightly different implementation than `contentEquals(CharSequence cs)` and
    may have some performance advantages in certain situations, but we are not going
    to discuss such details. Besides, you probably will not even notice which of the
    two methods is used when you call `contentEquals()` on a `String` value unless
    you make an effort to exploit the difference.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `boolean contentEquals(StringBuffer sb)` 仅对 `StringBuffer` 有效。它的实现略有不同于 `contentEquals(CharSequence
    cs)`，在某些情况下可能具有一些性能优势，但我们不打算讨论这些细节。此外，当你在 `String` 值上调用 `contentEquals()` 时，你可能甚至不会注意到使用了哪种方法，除非你努力利用差异。
- en: length(), isEmpty(), and hashCode()
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: length()、isEmpty() 和 hashCode()
- en: The method `int length()` returns the number of characters in a `String` value.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `int length()` 返回 `String` 值中字符的数量。
- en: The method `boolean isEmpty()` returns `true` when there are no characters in
    the `String` value and the method `length()` returns zero.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `boolean isEmpty()` 在 `String` 值中没有字符且方法 `length()` 返回零时返回 `true`。
- en: The method `int hashCode()` returns a hash value of the `String` object.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `int hashCode()` 返回 `String` 对象的哈希值。
- en: trim(), toLowerCase(), and toUpperCase()
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: trim()、toLowerCase() 和 toUpperCase()
- en: The method `String trim()` removes leading and trailing whitespaces from a `String` value.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 方法 `String trim()` 从 `String` 值中删除前导和尾随空格。
- en: 'The following methods change the case of the characters in a `String` value:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法更改 `String` 值中字符的大小写：
- en: '`String toLowerCase()`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toLowerCase()`'
- en: '`String toUpperCase()`'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toUpperCase()`'
- en: '`String toLowerCase(Locale locale)`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toLowerCase(Locale locale)`'
- en: '`String toUpperCase(Locale locale)`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String toUpperCase(Locale locale)`'
- en: getBytes(), getChars(), and toCharArray()
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: getBytes()、getChars() 和 toCharArray()
- en: 'The following methods convert the `String` value to a byte array, optionally
    encoding it using the given charset:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将 `String` 值转换为字节数组，可选择使用给定的字符集进行编码：
- en: '`byte[] getBytes()`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes()`'
- en: '`byte[] getBytes(Charset charset)`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes(Charset charset)`'
- en: '`byte[] getBytes(String charsetName)`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`byte[] getBytes(String charsetName)`'
- en: 'And these methods convert all the `String` value to other types, or only part
    of it:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法将所有或部分 `String` 值转换为其他类型：
- en: '`IntStream chars()`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntStream chars()`'
- en: '`char[] toCharArray()`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char[] toCharArray()`'
- en: '`char charAt(int index)`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char charAt(int index)`'
- en: '`CharSequence subSequence(int beginIndex, int endIndex)`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CharSequence subSequence(int beginIndex, int endIndex)`'
- en: Get code point by index or stream
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按索引或流获取代码点
- en: 'The following group of methods convert all the `String` value, or only part
    of it, into Unicode code points of its characters:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组方法将 `String` 值的全部或部分转换为其字符的Unicode代码点：
- en: '`IntStream codePoints()`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IntStream codePoints()`'
- en: '`int codePointAt(int index)`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointAt(int index)`'
- en: '`int codePointBefore(int index)`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointBefore(int index)`'
- en: '`int codePointCount(int beginIndex, int endIndex)`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int codePointCount(int beginIndex, int endIndex)`'
- en: '`int offsetByCodePoints(int index, int codePointOffset)`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int offsetByCodePoints(int index, int codePointOffset)`'
- en: We explained Unicode code points in [Chapter 5](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml), *Java
    Language Elements and Types*. These methods are especially useful when you need
    to represent characters that *do not fit* into the two bytes of the `char` type.
    Such characters have code points bigger than `Character.MAX_VALUE`, which is  `65535`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](ddf91055-8610-4b8c-acc5-453cfa981760.xhtml) *Java语言元素和类型*中解释了Unicode代码点。当你需要表示*不能适应*
    `char` 类型的两个字节时，这些方法特别有用。这样的字符具有大于 `Character.MAX_VALUE` 的代码点，即  `65535`。
- en: Class lang3.StringUtils
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类 lang3.StringUtils
- en: The class `org.apache.commons.lang3.StringUtils` of the Apache Commons library
    has more than 120 static utility methods that complement those of the class `String` we
    described in the previous section.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons库的 `org.apache.commons.lang3.StringUtils` 类具有120多个静态实用方法，这些方法补充了我们在前一节中描述的 `String` 类的方法。
- en: 'Among the most popular are the following static methods:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的是以下静态方法：
- en: '`boolean isBlank(CharSequence cs)`: returns `true` when the passed-in parameter
    is an empty `String` "", `null`, or whitespace'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isBlank(CharSequence cs)`: 当传入的参数为空字符串""、`null` 或空格时返回 `true`'
- en: '`boolean isNotBlank(CharSequence cs)`: returns `true` when the passed-in parameter
    is not an empty `String` "", `null`, or whitespace'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNotBlank(CharSequence cs)`: 当传入的参数不为空字符串""、`null` 或空格时返回 `true`'
- en: '`boolean isAlpha(CharSequence cs)`: returns `true` when the passed-in parameter
    contains only Unicode letters'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlpha(CharSequence cs)`: 当传入的参数只包含Unicode字母时返回 `true`'
- en: '`boolean isAlphaSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters and spaces (''  '')'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaSpace(CharSequence cs)`: 当传入的参数仅包含Unicode字母和空格（'' ''）时返回`true`'
- en: '`boolean isNumeric(CharSequence cs)`: returns `true` when the passed-in parameter
    contains only digits'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNumeric(CharSequence cs)`: 当传入的参数仅包含数字时返回`true`'
- en: '`boolean isNumericSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only digits and spaces (''  '')'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isNumericSpace(CharSequence cs)`: 当传入的参数仅包含数字和空格（'' ''）时返回`true`'
- en: '`boolean isAlphaNumeric(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters and digits'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaNumeric(CharSequence cs)`: 当传入的参数仅包含Unicode字母和数字时返回`true`'
- en: '`boolean isAlphaNumericSpace(CharSequence cs)`: returns `true` when the passed-in
    parameter contains only Unicode letters, digits, and spaces (''  '')'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean isAlphaNumericSpace(CharSequence cs)`: 当传入的参数仅包含Unicode字母、数字和空格（''
    ''）时返回`true`'
- en: We highly recommend you look through the API of this class and get a feel for
    what you can find there.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您查看该类的API并了解您可以在其中找到什么。
- en: Managing time
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理时间
- en: There are many classes in the `java.time` package and its sub-packages. They
    were introduced as a replacement for other—older—packages that handle date and
    time. The new classes are thread-safe (so better suited for multithreaded processing)
    and, no less important, are more consistently designed and easier to understand.
    Also, the new implementation follows the **International Standard Organization**
    (**ISO**) for date and time formats, but allows the use of any other custom format
    too.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.time`包及其子包中有许多类。它们被引入作为处理日期和时间的其他旧包的替代品。新类是线程安全的（因此更适合多线程处理），而且同样重要的是，设计更一致，更容易理解。此外，新实现遵循国际标准组织（ISO）的日期和时间格式，但也允许使用任何其他自定义格式。'
- en: 'We will describe the main five classes and demonstrate how to use them:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述主要的五个类，并演示如何使用它们：
- en: '`java.util.LocalDate`'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalDate`'
- en: '`java.util.LocalTime`'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalTime`'
- en: '`java.util.LocalDateTime`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.LocalDateTime`'
- en: '`java.util.Period`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Period`'
- en: '`java.util.Duration`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Duration`'
- en: All these, and other classes of the `java.time` package and its sub-packages,
    are rich in various functionalities that cover all practical and any imaginable
    cases. But we are not going to cover all of them, just introduce the basics and
    most popular use cases.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些以及`java.time`包及其子包中的其他类都具有丰富的各种功能，涵盖了所有实际情况和任何想象得到的情况。但我们不打算覆盖所有内容，只是介绍基础知识和最常见的用例。
- en: java.time.LocalDate
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`java.time.LocalDate`'
- en: 'The class `LocalDate` does not carry time. It represents a date in ISO 8601
    format, yyyy-MM-DD:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`类不包含时间。它表示ISO 8601格式的日期，即yyyy-MM-DD：'
- en: '[PRE43]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As you can see, the method `now()` returns the current date as it is set on
    your computer: `April 14, 2018` was the date when this section was written.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，方法`now()`返回当前日期，即它设置在您计算机上的日期：`April 14, 2018`是撰写本节时的日期。
- en: 'Similarly,  you can get the current date in any other timezone using the static
    method `now(ZoneId zone)`. The `ZoneId` object can be constructed using the static
    method `ZoneId.of(String zoneId)`, where `String zoneId` is any of the `String` values
    returned by the method `ZonId.getAvailableZoneIds()`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以使用静态方法`now(ZoneId zone)`获取任何其他时区的当前日期。`ZoneId`对象可以使用静态方法`ZoneId.of(String
    zoneId)`构造，其中`String zoneId`是方法`ZonId.getAvailableZoneIds()`返回的任何`String`值之一：
- en: '[PRE44]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This code prints many timezone IDs, one of them being `Asia/Tokyo`. Now, we
    can find what the date is now, in that time zone:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码打印了许多时区ID，其中之一是`Asia/Tokyo`。现在，我们可以找出当前日期在该时区的日期：
- en: '[PRE45]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'An object of `LocalDate` can represent any date in the past or in the future
    too, using the following methods:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`的对象也可以表示过去或未来的任何日期，使用以下方法：'
- en: '`LocalDate parse(CharSequence text)`: constructs an object from a string in ISO
    8601 format, yyyy-MM-DD'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate parse(CharSequence text)`: 从ISO 8601格式的字符串yyyy-MM-DD构造对象'
- en: '`LocalDate parse(CharSequence text, DateTimeFormatter formatter) `: constructs
    an object from a string in a format specified by the object `DateTimeFormatter`, which
    has many predefined formats'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate parse(CharSequence text, DateTimeFormatter formatter) `: 根据对象`DateTimeFormatter`指定的格式从字符串构造对象，该对象有许多预定义格式'
- en: '`LocalDate of(int year, int month, int dayOfMonth)`: constructs an object form
    a year, month, and day'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, int month, int dayOfMonth)`: 从年、月和日构造对象'
- en: '`LocalDate of(int year, Month month, int dayOfMonth)`: constructs an object
    from a year, month (as `enum` constant), and day'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate of(int year, Month month, int dayOfMonth)`：根据年份、月份（作为`enum`常量）和日期构造对象'
- en: '`LocalDate ofYearDay(int year, int dayOfYear)`: constructs an object from a
    year and day-of-year'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate ofYearDay(int year, int dayOfYear)`：根据年份和年份中的日数构造对象'
- en: 'The following code demonstrates these methods:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了这些方法：
- en: '[PRE46]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Using the `LocalDate` object, you can get various values:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LocalDate`对象，可以获取各种值：
- en: '[PRE47]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `LocalDate` object can be modified:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象可以被修改：'
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The `LocalDate` objects can be compared:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`对象也可以进行比较：'
- en: '[PRE49]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: There are many other helpful methods in the `LocalDate` class. If you have to
    work with dates, we recommend that you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDate`类中还有许多其他有用的方法。如果您需要处理日期，我们建议您阅读该类及其他`java.time`包及其子包的API。'
- en: java.time.LocalTime
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time.LocalTime
- en: The class `LocalTime` contains the time without a date. It has methods similar
    to those of the class `LocalDate`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类包含没有日期的时间。它具有类似于`LocalDate`类的方法。'
- en: 'Here is how an object of the `LocalTime` class can be created:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何创建`LocalTime`类的对象的方法：
- en: '[PRE50]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Each component of the time value can be extracted from a `LocalTime` object
    as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`对象的每个时间值组件可以按以下方式提取：'
- en: '[PRE51]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The object can be modified:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象可以被修改：
- en: '[PRE52]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'And two objects of the `LocalTime` class can be compared as well:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类的两个对象也可以进行比较：'
- en: '[PRE53]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: There are many other helpful methods in the `LocalTime` class. If you have to
    work with time, we recommend you read the API of this class and other classes
    of the `java.time` package and its sub-packages.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalTime`类中还有许多其他有用的方法。如果您需要处理时间，请阅读该类及其他`java.time`包及其子包的API。'
- en: java.time.LocalDateTime
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: java.time.LocalDateTime
- en: 'The class `LocalDateTime` contains both date and time, and has all the methods
    the classes `LocalDate` and `LocalTime` have, so we are not going to repeat them
    here. We will only show how an object of `LocalDateTime` can be created:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDateTime`类同时包含日期和时间，并且具有`LocalDate`类和`LocalTime`类拥有的所有方法，因此我们不会在此重复。我们只会展示如何创建`LocalDateTime`对象：'
- en: '[PRE54]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There are many other helpful methods in the `LocalDateTime` class. If you have
    to work with date and time, we recommend you read the API of this class and other
    classes of the `java.time` package and its sub-packages.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocalDateTime`类中还有许多其他有用的方法。如果你需要处理日期和时间，我们建议你阅读该类及其他`java.time`包及其子包的API。'
- en: Period and Duration
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Period`和`Duration`'
- en: 'The classes `java.time.Period` and `java.time.Duration` are designed to contain
    an amount of time:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.time.Period`和`java.time.Duration`类的设计目的是包含一定的时间量：'
- en: The `Period` object contains an amount of time in units of years, months, and
    days
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Period`对象包含以年、月和日为单位的时间量'
- en: The `Duration` object contains an amount of time in hours, minutes, seconds,
    and nanoseconds
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Duration`对象包含以小时、分、秒和纳秒为单位的时间量'
- en: 'The following code demonstrates their creation and use with the class `LocalDateTime`,
    but the same methods exist in the classes `LocalDate` (for `Period`) and `LocalTime` (for `Duration`):'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了它们如何在`LocalDateTime`类中创建和使用，但是对于`Period`来说，相同的方法也存在于`LocalDate`类中，而对于`Duration`来说，相同的方法也存在于`LocalTime`类中：
- en: '[PRE55]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Some other ways to create and use `Period` objects are demonstrated in the
    following code:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中还演示了创建和使用`Period`对象的其他方法：
- en: '[PRE56]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Objects of `Duration` can be similarly created and used:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`Duration`对象可以类似地创建和使用：'
- en: '[PRE57]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: There are many other helpful methods in the classes `Period` and `Duration`.
    If you have to work with the amount of time, we recommend you read the API of
    these classes and other classes of the `java.time` package and its sub-packages.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`Period`和`Duration`类中还有许多其他有用的方法。如果您需要处理时间量，请阅读这些类及其他`java.time`包及其子包的API。'
- en: Managing random numbers
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理随机数
- en: Generating a truly random number is a big topic that does not belong to this
    book. But for the vast majority of practical purposes, the pseudo-random number
    generators provided by Java are good enough, and that is what we are going to
    discuss in this section.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个真正的随机数是一个大问题，不属于本书。但是对于绝大多数实际目的来说，Java提供的伪随机数生成器已经足够好了，这就是我们将在本节中讨论的内容。
- en: 'There are two primary ways to generate a random number in Java Standard Library:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java标准库中生成随机数有两种主要方式：
- en: The `java.lang.Math.random()` method
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.Math.random()`方法'
- en: The `java.util.Random` class
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.Random`类'
- en: There is also the `java.security.SecureRandom` class, which provides a cryptographically
    strong random number generator, but it is outside the scope of an introductory
    course.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 `java.security.SecureRandom` 类，它提供了一个加密强度很高的随机数生成器，但超出了入门课程的范围。
- en: Method java.lang.Math.random()
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法 `java.lang.Math.random()`
- en: 'The static method `double random()` of the class `Math` returns a `double` type
    value greater than or equal to `0.0` and less than `1.0`:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `Math` 的静态方法 `double random()` 返回一个大于或等于 `0.0` 且小于 `1.0` 的 `double` 类型值：
- en: '[PRE58]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We captured the result in the previous comments. But in practice, more often
    than not, a random integer from a certain range is required. To accommodate such
    a need, we can write a method that, for example, produces a random integer number
    from 0 (inclusive) to 10 (exclusive):'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的注释中我们已经捕获了结果。但在实践中，更多时候需要的是某个范围内的随机整数。为了满足这样的需求，我们可以编写一个方法，例如，生成一个从 0（包含）到
    10（不包含）的随机整数：
- en: '[PRE59]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here is the result of one run of the previous code:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的一次运行结果：
- en: '[PRE60]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'As you can see, it generates a random integer value that can be one of the
    following 10 numbers: 0, 1, ..., 9\. And here is the code that uses the same method
    and produces random integer numbers from 0 (inclusive) to 100 (exclusive):'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它生成一个随机整数值，可以是以下 10 个数字之一：0、1、...、9。以下是使用相同方法的代码，并生成从 0（包含）到 100（不包含）的随机整数：
- en: '[PRE61]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'And when you need a random number between 100 (inclusive) and 200 (exclusive),
    you can just add 100 to the preceding result:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要一个介于 100（包含）和 200（不包含）之间的随机数时，你可以直接将前述结果加上 100：
- en: '[PRE62]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Including both ends of the range in the result can be done by rounding the
    generated `double` value:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 将范围的两个端点包括在结果中可以通过四舍五入生成的 `double` 值来实现：
- en: '[PRE63]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When we used the preceding method, the results were:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用前述方法时，结果为：
- en: '[PRE64]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As you can see, the upper end of the range (the number 200) is included in
    the possible results set. The same effect can be achieved by just adding 1 to
    the requested upper range:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，范围的上限（数字 200）包含在可能的结果集中。可以通过将所请求的上限范围加 1 来达到同样的效果：
- en: '[PRE65]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If we use the previous method, we can get the following result:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用前述方法，我们可以得到以下结果：
- en: '[PRE66]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: But if you look at the source code of the `Math.random()` method, you will see
    that it uses the `java.util.Random` class and its `nextDouble()` method to generate
    a random double value. So, let's look at how to use the `java.util.Random` class directly.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你查看 `Math.random()` 方法的源代码，你会看到它使用了 `java.util.Random` 类及其 `nextDouble()`
    方法来生成一个随机的 double 值。因此，让我们看看如何直接使用 `java.util.Random` 类。
- en: Class java.util.Random
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类 `java.util.Random`
- en: 'The method `doubles()` of the class `Random` generates a `double` type value
    greater than or equal to `0.0` and less than `1.0`:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `Random` 的方法 `doubles()` 生成一个大于或等于 `0.0` 且小于 `1.0` 的 `double` 类型值：
- en: '[PRE67]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We can use the method `nextDouble()` the same way we used `Math.random()` in
    the previous section. But class have other methods that can be used without creating
    a custom `getInteger()` method when a random integer value of a certain range
    is required. For example, the `nextInt()` method returns an integer value between `Integer.MIN_VALUE` (inclusive)
    and `Integer.MAX_VALUE` (inclusive):'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像在上一节中使用 `Math.random()` 一样使用方法 `nextDouble()`。但是在需要某个范围内的随机整数值时，类还有其他方法可用，而无需创建自定义的
    `getInteger()` 方法。例如，`nextInt()` 方法返回介于 `Integer.MIN_VALUE`（包含）和 `Integer.MAX_VALUE`（包含）之间的整数值：
- en: '[PRE68]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'And the same method with a parameter allows us to limit the range of the returned
    values by the upper limit (exclusive):'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 并且带有参数的相同方法允许我们通过上限（不包含）限制返回值的范围：
- en: '[PRE69]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This code generates a random integer value between 0 (inclusive) and 10 (inclusive).
    And the following code returns a random integer value between 11 (inclusive) and
    20 (inclusive):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码生成一个介于 0（包含）和 10（包含）之间的随机整数值。以下代码返回介于 11（包含）和 20（包含）之间的随机整数值：
- en: '[PRE70]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Another way to generate a random integer from the range is by using the `IntStream` object
    returned by the method `ints(int count, int min, int max)`, where `count` is the
    number of requested values, `min` is the minimum value (inclusive), and `max` is the
    maximum value (exclusive):'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 从范围中生成随机整数的另一种方法是使用方法 `ints(int count, int min, int max)` 返回的 `IntStream` 对象，其中
    `count` 是所请求的值的数量，`min` 是最小值（包含），`max` 是最大值（不包含）：
- en: '[PRE71]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This code returns three integer values from 0 (inclusive) to 100 (inclusive).
    We will talk more about streams in [Chapter 18](be052e15-ac84-4e19-9bd9-24548aa3f904.xhtml), *Streams
    and Pipelines*.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从0（包含）到100（包含）返回三个整数值。我们将在[第18章](be052e15-ac84-4e19-9bd9-24548aa3f904.xhtml)中更多地讨论流，*流和管道*。
- en: Exercise – Objects.equals() result
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 - Objects.equals() 结果
- en: 'There are three classes:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个类：
- en: '[PRE72]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: What is going to be displayed when we run the `main()` method of the `Exercise` class?
    `Error`? `False`? `True`?
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`Exercise`类的`main()`方法时，会显示什么？ `错误`？ `假`？ `真`？
- en: Answer
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: 'The display will show only one value: `True`. The reason is that both private
    fields—`a` and `b`—are initialized to `null`.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 显示将只显示一个值：`真`。原因是两个私有字段——`a`和`b`——都初始化为`null`。
- en: Summary
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the reader to the most popular utilities and
    some other classes from the Java Standard Library and Apache Commons libraries.
    Every Java programmer has to have a solid understanding of their capabilities
    in order to become an effective coder. Studying them also helps to get exposure
    to various software designs pattern and solutions that are instructive and can
    be used as patterns for best coding practices in any application.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向读者介绍了Java标准库和Apache Commons库中最受欢迎的实用程序和一些其他类。每个Java程序员都必须对它们的功能有很好的理解，才能成为有效的编码者。研究它们还有助于了解各种软件设计模式和解决方案，这些模式和解决方案具有指导意义，并且可以用作任何应用程序中最佳编码实践的模式。
- en: In the next chapter, we are going to demonstrate to the reader how to write
    Java code that can manipulate—insert, read, update, and delete—data in a database.
    It will also provide a short introduction to SQL and basic database operations.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向读者演示如何编写能够操作数据库中数据的Java代码——插入、读取、更新和删除。它还将提供SQL和基本数据库操作的简要介绍。
